#!/usr/bin/bash

#
#MKS937A Simulator
#

#This is a series of automated tests for the mks973 db records
#Run start_ioc_tty.script:
#1) Set up two connected tty ports using socat (Called COM8 and COM9)
#2) connect IOC at one end, COM8

#This script will:
#3) Set port parameters. Connect awk script that simulates the mks at the other, COM9. 
#4) Check that db gives the correct resonse via caput/caget and using awk
#5) Restart with a different awk script with different test conditions

ENVIRON=../../
ENVIRONS=set_environment.script
WHOAMI=`whoami`
USER_DELAY=0
ERROR_RECORD=""

#Kill old gawk background processes attached to tty

for PS in $( ps -u $WHOAMI | grep "gawk" | awk '{print $1}' ); do echo "Killing gawk $PS"; kill $PS; wait; done

# Look for test
INPUTF=list_test.txt

#Delimiter for test file used by awk
OLDIFS=$IFS
IFS=,
[ ! -f $INPUT ] && { echo "$INPUT file for tests not found"; exit 99; }

# Port parameters must match the st file. Start awk simulation. Get PID

stty -F $HOME/COM9 sane
stty -F $HOME/COM9 9600 cs8 -parodd -echo

# Run tests
CWD=$PWD
cd $ENVIRON
source $ENVIRONS
cd $CWD
OLDPID=0
while read PV PFIELD SDOUT PVOUT TYPE
do

 #Kill any old gawk, ignore output
 [ $OLDPID -gt "0" ] && { kill $OLDPID > /dev/null 2> /dev/null; wait $OLDPID 2>/dev/null; }

 #Ignore # and empty lines
 PVTEST=`echo $PV | cut -c1`
 [ -z "$PVTEST" ] && { continue; }
 [ "$PVTEST" = "#" ] && { continue; }

 #Show what was read in
 echo $PV $PFIELD $SDOUT $PVOUT $TYPE
 # If this is an error record, record and read next line
 [ "$PV" = "ONERROR" ] && { ERROR_RECORD=$PFIELD; continue; }
 # Read any user dealys
 [ "$PV" = "SETDELAY" ] && { USER_DELAY=$PFIELD; echo "DELAY SET TO: "$USER_DELAY; continue; }

 #Flush error record
 caput  $ERROR_RECORD.VAL 0 2> /dev/null > /dev/null

 #Start gawk simulation with variables from the file
 gawk '{print "Sim In: "$0 >> "/dev/tty"; print "'$SDOUT'"; print "Sim Out: '$SDOUT'" >>"/dev/tty" }' $HOME/COM9 > $HOME/COM9 &
 #Record this PID
 OLDPID=$! 

 #Use caput to trigger the record. caget does not trigger the record, only reads it.
 #Save any errors
 caput  `echo $PV | awk '{print $1}'` `echo $PV | awk '{print $2}'` 2> /dev/null > /dev/null
 TESTOUT=`caget -d$TYPE $PFIELD | awk '/Value/{print substr($0, index($0,$2))}'`
 ERROR_RESULT=`caget $ERROR_RECORD`
 echo "IOC responded" $TESTOUT "and user expected" $PVOUT

 #Check that the record returned what you expected
 [ "$TESTOUT" = "$PVOUT" ] && { echo "<OK> $PFIELD"; } || { echo "************Error $PFIELD : Type $ERROR_RESULT"; }
 sleep $USER_DELAY"s"
done < $INPUTF

#Kill last gawk
[ $OLDPID -gt "0" ] && { kill $OLDPID > /dev/null 2> /dev/null; wait $OLDPID 2>/dev/null; }
