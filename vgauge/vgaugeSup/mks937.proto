## Stream Device Protocol for the MKS 937A Gauge Controller
## 09/11/2015
## Rory Clarke 

##
##Error Responses: Return these as an error message via mismatch
##

#CALLOCK! User calibration functions are locked out
#COMLOCK! Control and configuration commands are locked out, but commands that only
#read information may be used.

#MISCONN! A Pirani, convection Pirani, or thermocouple sensor is not connected
#NOGAUGE!
#NOT929! The Controller is not a 929A
#NOT937! The Controller is not a 937A
#NOT CC! The sensor is not a cold cathode sensor
#NOT CM! The sensor is not a capacitance manometer
#NotCMD! The characters received did not form a valid command
#NOT EB! The Hot Cathode Degas Module is not electron bombardment type
#NOT HC! The sensor is not a hot cathode sensor
#NOT ION! The sensor is not an ion (hot or cold cathode) sensor
#NOTCONV! The sensor is not a convection sensor



##############################################
#Char input
#

terminator   = CR;
MaxInput = 40;


#############################################
#Pressure
#

## PZ: Not useful as the data stream is longer than the max 40 chars in EPICS. Used for testing
#get_PZ {out "PZ"; in "%1.1E" }

## Pn: read pressure on channel n: Use the regexp to filter numbers from match HI>Eee, LO<Eee,AA_Eee
get_pres {out "P\$1"; in "%E"; @mismatch{in "%(\$2)/[A-Za-z_><! (937)(929)]+/"}  }


## Pressure and combination sensors
get_comb {out "C\$1"; in "%E"; @mismatch{in "%(\$2)#s";}  }

###############################################
#Relay, protection, control, HC sensitivity set points for hot cathode
#

get_gen {out "\$1\$2"; in "%E"; @mismatch{in "%(\$3)#s";}  }
set_gen {out "\$1\$2=%#.1E"; in "%(\$3)#s"}
dis_gen {out "\$1\$2=0"; in "%(\$3)#s"}

###############################################
#Enable or disable relay set points 
#
set_er  {out "ER\$1"; in "OK";     @mismatch{in "%(\$2)#s";}}
set_xr  {out "XR\$1"; in "OK";     @mismatch{in "%(\$2)#s";}}
get_rly {out "RELAYS"; in "rly%5b"; @mismatch{in "%(\$2)#s";}}

###############################################
#Enable or disable coldcathode 
#
set_ecc {out "ECC\$1"; in "OK"; @mismatch{in "%(\$2)#s";}}
set_xcc {out "XCC\$1"; in "OK"; @mismatch{in "%(\$2)#s";}}
###############################################
#Enable or disable hotcathode 
#
set_efil {out "EFIL\$1"; in "OK";        @mismatch{in "%(\$2)#s";}}
set_edeg {out "EDEG\$1"; in "OK";        @mismatch{in "%(\$2)#s";}}
set_xfil {out "XFIL\$1"; in "OK";        @mismatch{in "%(\$2)#s";}}
set_xdeg {out "XDEG\$1"; in "OK";        @mismatch{in "%(\$2)#s";}}
#Map the three states, two bis: 0,1,X given by the MKF to 4 bits: HC discon, A discon, HC degas, A degas (H,A,1,0)
#There are 9 combinations for the two degass and two disconnects but we have 16 options with four bits
#H can't be with a 1, A can't be with a zero and HH AA make no sense
#To make this work 00->0, 01->1, 10->2, 11->3, 0X->4,1X->6,X0->8,X1->9,XX->12
get_deg  {out "DEGAS"; in "degas%#{00=0|01=1|10=2|11=3|0X=4|1X=6|X0=8|X1=9|XX=12}"; @mismatch{in "%(\$2)#s";}}

