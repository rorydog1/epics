# Template database for the the vacuum gaugeMKS 937A
# Rory Clarke 26/11/2015
####################
# Changes
# 20/12/2015 EDM meter ranges read from the records
#####################
# Notation: S are setters, G are getters
# The MKS must be set to pressure in Torr otherwise HC will fail
# Each device sensor (1-5) is started from st.cmd with a new dbLoadRecords
#
#
# substitutions snd record names:
#  - DEVICE name
# PORT    - asyn PORT
# SENSOR  - SENSOR (1-5)

# SEN_TY  - CC,PR,CP,CM,TC => Cold Cathode, Pirani, Convection Pirani, Capacitance Manometer, Thermocouple
#         - Override default ranges in:
#	    GtSenRngL
#           GtSenRngH
#           GtSenRngRlyL
#           GtSenRngRlyH
#         - A CM (Capacative Manometer) is a special case. Set the scale in CAPMAN and its ranges are calculated
#           GtCmRangeL
#           GtCmRangeH
#           GtCmRelayRngL
#           GtCmRelayRngH
# CAPMAN  - Scale of capacative manometer. Default is 100

#         - Sensor ranges 1 and 2 combined overridden in
# COMBL	  - combined sensor to use low range (1,2)
# COMBH   - combined sensor to use for high range (1,2)

# UNITS   - Default = Torr



# Notes:
#The five sensor channels, HC/CC, A1, A2, B1, B2, are identified in
#commands and responses as channel numbers 1-5.
#
#Default units are in Torr, can be changed with $UNITS
#if you want to use units other than torr, then pressure limits need to be added to substitution file

#ERR will hold any message that is not parsed by StreamDevice. These can be a mix of errors or warnings
#


################################################################################
#General Info for OIPs

record(stringin, "$(DEVICE)$(SENSOR):GtDeviceName")
{
    field(VAL,"$(DEVICE)")
}

record(stringin, "$(DEVICE)$(SENSOR):GtSenNum")
{
    field(VAL,"$(SENSOR)")
}

record(stringin,"$(DEVICE)$(SENSOR):GtSenType")
{
    field(VAL,"$(SENTYP)")
}
record(stringin,"$(DEVICE)$(SENSOR):GtTypeCP")
{
    field(VAL,"$(CAPMAN=100)")
}

################################################################################
#Setup:
#There are five different types of sensor
#StUpdateRage reads a sensor string and triggers a fanout
#Map sensor type to a number in StSenT
#Deal with the CM calculatio in GtCmRange*
#The sensor type and the CM ranges are fed into GtSen*
#calc records translate that sensor number to the correct range for a sensor
#
#Note:
#The above does not apply to combined ranges and you only alter/read
#GtCombSenRngHL 1(Combined sens 1 L),2(Combined sens 1 H),3(Combined sens 2 L),4(Combined 2 sens H)

record(stringin, "$(DEVICE)$(SENSOR):StUpdateRange")
{
    field(VAL,"$(SENTYP)")
    field(PINI,"YES")
    field(FLNK,"$(DEVICE)$(SENSOR):PrvRngFan")
}

record(stringin, "$(DEVICE)$(SENSOR):StUpdateCmbRangeL")
{   
    field(DESC, "Low sensor for combination")
    field(VAL,"$(COMBL=CC)")
    field(PINI,"YES")
    field(FLNK,"$(DEVICE)$(SENSOR):PrvCmbLFan")
}

record(stringin, "$(DEVICE)$(SENSOR):StUpdateCmbRangeH")
{
    field(DESC, "High sensor for combination")
    field(VAL,"$(COMBH=CC)")
    field(PINI,"YES")
    field(FLNK,"$(DEVICE)$(SENSOR):PrvCmbHFan")
}


record(fanout, "$(DEVICE)$(SENSOR):PrvRngFan")
{
    field(DESC, "Fanout for pressure ranges")
    field(LNK1,"$(DEVICE)$(SENSOR):StSenT")
    field(LNK2,"$(DEVICE)$(SENSOR):GtCmRangeL")
    field(LNK3,"$(DEVICE)$(SENSOR):GtCmRangeH")
    field(LNK4,"$(DEVICE)$(SENSOR):GtSenRngL")
    field(LNK5,"$(DEVICE)$(SENSOR):GtSenRngH")
}

record(fanout, "$(DEVICE)$(SENSOR):PrvCmbLFan")
{
    field(DESC, "Fanout for comb 1,2 low ranges")
    field(LNK1,"$(DEVICE)$(SENSOR):StCmbTL")
    field(LNK2,"$(DEVICE)$(SENSOR):GtCombRngL")
}

record(fanout, "$(DEVICE)$(SENSOR):PrvCmbHFan")
{
    field(DESC, "Fanout for comb 1,2 high ranges")
    field(LNK1,"$(DEVICE)$(SENSOR):StCmbTH")
    field(LNK2,"$(DEVICE)$(SENSOR):GtCombRngH")
}

record(stringout, "$(DEVICE)$(SENSOR):StSenT")
{
    field(DESC, "Set string for GtSenT")
    field(DOL,"$(DEVICE)$(SENSOR):StUpdateRange.VAL")
    field(OMSL,"closed_loop")
    field(OUT,"$(DEVICE)$(SENSOR):GtSenT")
}

record(stringout, "$(DEVICE)$(SENSOR):StCmbTL")
{
    field(DESC, "Set string for GtSenT")
    field(DOL,"$(DEVICE)$(SENSOR):StUpdateCmbRangeL.VAL")
    field(OMSL,"closed_loop")
    field(OUT,"$(DEVICE)$(SENSOR):GtSenT")
}

record(stringout, "$(DEVICE)$(SENSOR):StCmbTH")
{
    field(DESC, "Set string for GtSenT")
    field(DOL,"$(DEVICE)$(SENSOR):StUpdateCmbRangeH.VAL")
    field(OMSL,"closed_loop")
    field(OUT,"$(DEVICE)$(SENSOR):GtSenT")
}

record(mbbi, "$(DEVICE)$(SENSOR):GtSenT")
{
    field(DESC, "Convert sensor type to a number")
    field(VAL,"0")
    field(ONST,"CC")
    field(TWST,"PR")
    field(THST,"CP")
    field(FRST,"CM")
    field(FVST,"TC")
    field(ZRSV,"INVALID")
}

###Sensor ranges 1-5

record(calcout, "$(DEVICE)$(SENSOR):GtSenRngL")
{
    field(DESC, "Low sensor range")
    field(INPL, "$(DEVICE)$(SENSOR):GtSenT.VAL")
#   Low
    field(INPA,1.0e-11)
    field(INPB,5.0e-04)
    field(INPC,1.0e-03)
    field(INPD, "$(DEVICE)$(SENSOR):GtCmRangeL.VAL")
    field(INPE,1.0e-03)
    field(CALC,"L=1?A:L=2?B:L=3?C:L=4?D:E")
    field(OOPT,"Every Time")
    field(OUT,"$(DEVICE)$(SENSOR):GtP.LOPR PP")
}


record(calcout, "$(DEVICE)$(SENSOR):GtSenRngH")
{
    field(DESC, "High sensor range")
    field(INPL, "$(DEVICE)$(SENSOR):GtSenT.VAL")
#   Low
    field(INPA,1.0e-02)
    field(INPB,4.0e-02)
    field(INPC,1.0e+03)
    field(INPD, "$(DEVICE)$(SENSOR):GtCmRangeH.VAL")
    field(INPE,1.0e-01)
    field(CALC,"L=1?A:L=2?B:L=3?C:L=4?D:E")
    field(OOPT,"Every Time")
    field(OUT,"$(DEVICE)$(SENSOR):GtP.HOPR PP")
}

###Sensor ranges of combination sensors on channel 1 and 2

record(calcout, "$(DEVICE)$(SENSOR):GtCombRngL")
{
    field(DESC, "Low sensor range")
    field(INPL, "$(DEVICE)$(SENSOR):GtSenT.VAL")
#   Low
    field(INPA,1.0e-11)
    field(INPB,5.0e-04)
    field(INPC,1.0e-03)
    field(INPD, "$(DEVICE)$(SENSOR):GtCmRangeL.VAL")
    field(INPE,1.0e-03)
    field(CALC,"L=1?A:L=2?B:L=3?C:L=4?D:E")
    field(OOPT,"Every Time")
    field(OUT,"$(DEVICE)$(SENSOR):GtC.LOPR PP")
}


record(calcout, "$(DEVICE)$(SENSOR):GtCombRngH")
{
    field(DESC, "High sensor range")
    field(INPL, "$(DEVICE)$(SENSOR):GtSenT.VAL")
#   Low
    field(INPA,1.0e-02)
    field(INPB,4.0e-02)
    field(INPC,1.0e+03)
    field(INPD, "$(DEVICE)$(SENSOR):GtCmRangeH.VAL")
    field(INPE,1.0e-01)
    field(CALC,"L=1?A:L=2?B:L=3?C:L=4?D:E")
    field(OOPT,"Every Time")
    field(OUT,"$(DEVICE)$(SENSOR):GtC.HOPR PP")
}

### Capacative manometer ranges
record(calc, "$(DEVICE)$(SENSOR):GtCmRangeL")
{
    field(DESC, "Capacative manometer low ranges")
    field(CALC,"$(CAPMAN=100)*1.0e-3")
}
record(calc, "$(DEVICE)$(SENSOR):GtCmRangeH")
{
    field(DESC, "Capacative manometer high ranges")
    field(CALC,"$(CAPMAN=100)")
}
record(calc, "$(DEVICE)$(SENSOR):GtCmRangeRlyL")
{
    field(DESC, "Capacative manometer relay low ranges")
    field(CALC,"$(CAPMAN=100)*0.01")
}
record(calc, "$(DEVICE)$(SENSOR):GtCmRangeRlyH")
{
    field(DESC, "Capacative manometer relay high ranges")
    field(CALC,"$(CAPMAN=100)*.95")
}


################################################################################
#Errors:
#Due to the nature of input links and VAL we need an stringout as a buffer for a string input to match in mbbi
#When an error is put into ERR, PrvErrFan triggers the St setters that read the ERR value
#and trigger Gt miibs to start thier matching

record(stringin, "$(DEVICE)$(SENSOR):ERR")
{
    field(FLNK,"$(DEVICE)$(SENSOR):PrvErrFan")
}

record(fanout, "$(DEVICE)$(SENSOR):PrvErrFan")
{
    field(LNK1,"$(DEVICE)$(SENSOR):StGlobalErr")
    field(LNK2,"$(DEVICE)$(SENSOR):StPErr")
    field(LNK3,"$(DEVICE)$(SENSOR):StSetRlyPntErr")
    field(LNK4,"$(DEVICE)$(SENSOR):StCCHCErr")
}

###Global

record(stringout, "$(DEVICE)$(SENSOR):StGlobalErr")
{
    field(DESC, "Set string for global errors")
    field(DOL,"$(DEVICE)$(SENSOR):ERR.VAL")
    field(OMSL,"closed_loop")
    field(OUT,"$(DEVICE)$(SENSOR):GtGlobalErr")
    field(FLNK,"$(DEVICE)$(SENSOR):GtGlobalErr")
}

record(mbbi, "$(DEVICE)$(SENSOR):GtGlobalErr")
{
    field(DESC, "Set bits for global errors")
    field(INP, "$(DEVICE)$(SENSOR):ERR.VAL PP")
    field(VAL,"0")
    field(ZRST,"OK")
    field(ONST,"NotCMD!")
    field(TWST,"NOT929!")
    field(THST,"NOT937!")
    field(FRST,"CALLOCK!")
    field(FVST,"COMLOCK!")
    field(SXST, "NOGAUGE!")
    field(SVST, "NOT CC!")
    field(EIST, "NOT CM!")
    field(NIST, "NOT EB!")
    field(TEST, "NOT HC!")
    field(ELST, "NOTION!")
    field(TVST, "NOCONV!")
}

###Pressure

record(stringout, "$(DEVICE)$(SENSOR):StPErr")
{
   field(DESC, "Set string for pressure errors")
   field(DOL,"$(DEVICE)$(SENSOR):ERR.VAL")
   field(OMSL,"closed_loop")
   field(OUT,"$(DEVICE)$(SENSOR):GtPErr")
   field(FLNK,"$(DEVICE)$(SENSOR):GtPErr")
}

record(mbbi, "$(DEVICE)$(SENSOR):GtPErr")
{
    field(DESC, "Set bits for pressure errors")
    field(VAL,"0")
    field(ZRST,"OK")
    field(ONST,"MISCONN!")
    field(TWST,"NEGATIV!")
    field(THST,"PROTECT!")
    field(FRST,"CONTROL!")
    field(FVST,"LowEmis!")
    field(SXST,"WAIT")
    field(SVST,"HV_OFF!")
    field(EIST,"FIL_OFF!")
    field(NIST,"LO")
    field(TEST,"LO<E")
    field(ELST,"AA_E")
    field(TVST,"HI>E")
    field(TTST,"HI")
    field(FLNK,"$(DEVICE)$(SENSOR):GtPErrEDM")
}

record (calc, "$(DEVICE)$(SENSOR):GtPErrEDM")
{
   field(DESC, "1-16 to EDM bit display")
   field(INPA,"$(DEVICE)$(SENSOR):GtPErr")
   field(CALC,"A=0?0:2**(A-1)")
}


###Relay set point and HC error

record(stringout, "$(DEVICE)$(SENSOR):StSetRlyPntErr")
{
   field(DESC, "Set string for rly errors")
   field(DOL,"$(DEVICE)$(SENSOR):ERR.VAL")
   field(OMSL,"closed_loop")
   field(OUT, "$(DEVICE)$(SENSOR):GtSetRlyPntErr")
   field(FLNK,"$(DEVICE)$(SENSOR):GtSetRlyPntErr")
}

record(mbbi, "$(DEVICE)$(SENSOR):GtSetRlyPntErr")
{
    field(DESC, "Set bits for Rly errors")
    field(INP, "$(DEVICE)$(SENSOR):ERR.VAL PP")
    field(VAL,"0")
    field(ZRST,"OK")
    field(ONST,"OUT!")
}
###Cold Cathode/ HC comands and error

record(stringout, "$(DEVICE)$(SENSOR):StCCHCErr")
{
   field(DESC, "Set string for CC errors")
   field(DOL,"$(DEVICE)$(SENSOR):ERR.VAL")
   field(OMSL,"closed_loop")
   field(OUT, "$(DEVICE)$(SENSOR):GtCCHCErr")
   field(FLNK,"$(DEVICE)$(SENSOR):GtCCHCErr")
}

record(mbbi, "$(DEVICE)$(SENSOR):GtCCHCErr")
{
    field(DESC, "Set bits for CC errors")
    field(INP, "$(DEVICE)$(SENSOR):ERR.VAL PP")
    field(VAL,"0")
    field(ZRST,"OK")
    field(ONST,"AGAIN")
    field(TWST,"PENDING")
    field(THST,"PS_FAULT!")
    field(FRST,"REARdis!")
    field(FVST,"LOCAL!")
    field(SXST,"REAR!")
    field(SVST,"COM_dis!")
}

################################################################################
# Read pressure set points
#


record(ai, "$(DEVICE)$(SENSOR):GtP")
{
    field(DESC, "Channel=1-5 Pressure")
    field(DTYP, "stream")
    field(INP,  "@mks937.proto get_pres($(SENSOR),$(DEVICE)$(SENSOR):ERR) $(PORT)")
    field(EGU,  $(UNITS='Torr'))
    field(LSV,  "MINOR")
    field(HSV,  "MINOR")
}

record(ai, "$(DEVICE)$(SENSOR):GtC")
{
    field(DESC, "Channel=1,2 combination sensor.")
    field(DTYP, "stream")
    field(INP,  "@mks937.proto get_comb($(SENSOR),$(DEVICE)$(SENSOR):ERR) $(PORT)")
    field(EGU,  $(UNITS='Torr'))
    field(LSV,  "MINOR")
    field(HSV,  "MINOR")
}

################################################################################
# Hot cathode settings
#

record(ai, "$(DEVICE)$(SENSOR):GtRLY")
{
    field(DESC, "Channel=1-5 Relay set points")
    field(DTYP, "stream")
    field(INP,  "@mks937.proto get_gen('RLY',$(SENSOR),$(DEVICE)$(SENSOR):ERR) $(PORT)")
    field(EGU,  $(UNITS='Torr'))
}

record(ao, "$(DEVICE)$(SENSOR):StRLY")
{
    field(DESC, "Relay disable")
    field(DESC, "Channel=1-5 Set relay points")
    field(DTYP, "stream")
    field(OUT,  "@mks937.proto set_gen('RLY',$(SENSOR),$(DEVICE)$(SENSOR):ERR) $(PORT)")
}

record(ao, "$(DEVICE)$(SENSOR):StDisableRLY")
{
    field(DESC, "Relay set points")
    field(DESC, "Channel=1-5 disable relay")
    field(DTYP, "stream")
    field(OUT,  "@mks937.proto dis_gen('RLY',$(SENSOR),$(DEVICE)$(SENSOR):ERR) $(PORT)")
}

record(ai, "$(DEVICE)$(SENSOR):GtPRO")
{
    field(DESC, "Channel=1,2,4 Protection set points")
    field(DTYP, "stream")
    field(INP,  "@mks937.proto get_gen('PRO',$(SENSOR),$(DEVICE)$(SENSOR):ERR) $(PORT)")
    field(EGU,  $(UNITS='Torr'))
}

record(ao, "$(DEVICE)$(SENSOR):StPRO")
{
    field(DESC, "Channel=1,2,4 Set protection points")
    field(DTYP, "stream")
    field(OUT,  "@mks937.proto set_gen('PRO',$(SENSOR),$(DEVICE)$(SENSOR):ERR) $(PORT)")
}

record(ao, "$(DEVICE)$(SENSOR):StDisablePRO")
{
    field(DESC, "Channel=1,2,4 disable protection")
    field(DTYP, "stream")
    field(OUT,  "@mks937.proto dis_gen('PRO',$(SENSOR),$(DEVICE)$(SENSOR):ERR) $(PORT)")
}

record(ai, "$(DEVICE)$(SENSOR):GtCTL")
{
    field(DESC, "Channel=1,2 control set points")
    field(DTYP, "stream")
    field(INP,  "@mks937.proto get_gen('CTL',$(SENSOR),$(DEVICE)$(SENSOR):ERR) $(PORT)")
    field(EGU,  $(UNITS='Torr'))
}

record(ao, "$(DEVICE)$(SENSOR):StCTL")
{
    field(DESC, "Channel=1,2 Set control points")
    field(DTYP, "stream")
    field(OUT,  "@mks937.proto set_gen('CTL',$(SENSOR),$(DEVICE)$(SENSOR):ERR) $(PORT)")
}

record(ao, "$(DEVICE)$(SENSOR):StDisableCTL")
{
    field(DESC, "Channel=1,2 disable control")
    field(DTYP, "stream")
    field(OUT,  "@mks937.proto dis_gen('CTL',$(SENSOR),$(DEVICE)$(SENSOR):ERR) $(PORT)")
}

record(ai, "$(DEVICE)$(SENSOR):GtSEN")
{
    field(DESC, "Channel=1,2 HC sensitivity set points")
    field(DTYP, "stream")
    field(INP,  "@mks937.proto get_gen('SEN',$(SENSOR),$(DEVICE)$(SENSOR):ERR) $(PORT)")
    field(EGU,  $(UNITS='Torr'))
}

record(ao, "$(DEVICE)$(SENSOR):StSEN")
{
    field(DESC, "Channel=1,2 Set HC sensitivity points")
    field(DTYP, "stream")
    field(OUT,  "@mks937.proto set_gen('SEN',$(SENSOR),$(DEVICE)$(SENSOR):ERR) $(PORT)")
}

################################################################################
# Setpoint relay commands
#

record(stringin, "$(DEVICE)$(SENSOR):StER")
{
    field(DESC, "Enable setpoint relay n=1-5")
    field(DTYP, "stream")
    field(INP,  "@mks937.proto set_er($(SENSOR),$(DEVICE)$(SENSOR):ERR) $(PORT)")
}

record(stringin, "$(DEVICE)$(SENSOR):StXR")
{
    field(DESC, "Disable setpoint relay n=1-5")
    field(DTYP, "stream")
    field(INP,  "@mks937.proto set_xr($(SENSOR),$(DEVICE)$(SENSOR):ERR) $(PORT)")
}

record(mbbiDirect, "$(DEVICE)$(SENSOR):GtRELAYS")
{
    field(DESC, "Five bit relay state; MSB=channel 1")
    field(DTYP, "stream")
    field(INP,  "@mks937.proto get_rly($(SENSOR),$(DEVICE)$(SENSOR):ERR) $(PORT)")
}

################################################################################
# Cold cathode commands
#

record(stringin, "$(DEVICE)$(SENSOR):StECC")
{
    field(DESC, "Enable cold cathode ch,1,2,4")
    field(DTYP, "stream")
    field(INP,  "@mks937.proto set_ecc($(SENSOR),$(DEVICE)$(SENSOR):ERR) $(PORT)")
}

record(stringin, "$(DEVICE)$(SENSOR):StXCC")
{
    field(DESC, "Disable cold cathode channel n=1,2,4")
    field(DTYP, "stream")
    field(INP,  "@mks937.proto set_xcc($(SENSOR),$(DEVICE)$(SENSOR):ERR) $(PORT)")
}

################################################################################
# Hot cathode power and gas commands
#

###################
#Interlocks test the pressure at the hot cathode sensor is below 10-2 torr
#before enabling the filament, or it may be damaged. 

record(stringin, "$(DEVICE)$(SENSOR):StEFIL")
{
    field(DESC, "Enable hot cathode ch,1,2")
    field(DTYP, "stream")
    field(INP,  "@mks937.proto set_efil($(SENSOR),$(DEVICE)$(SENSOR):ERR) $(PORT)")
}

record(stringin, "$(DEVICE)$(SENSOR):StEDEG")
{
    field(DESC, "Enable degass hot cathode ch 1,2")
    field(DTYP, "stream")
    field(INP,  "@mks937.proto set_edeg($(SENSOR),$(DEVICE)$(SENSOR):ERR) $(PORT)")
}
record(stringin, "$(DEVICE)$(SENSOR):StXFIL")
{
    field(DESC, "Disable hot cathode ch,1,2")
    field(DTYP, "stream")
    field(INP,  "@mks937.proto set_xfil($(SENSOR),$(DEVICE)$(SENSOR):ERR) $(PORT)")
}

record(stringin, "$(DEVICE)$(SENSOR):StXDEG")
{
    field(DESC, "Disable degass hot cathode n=1,2")
    field(DTYP, "stream")
    field(INP,  "@mks937.proto set_xdeg($(SENSOR),$(DEVICE)$(SENSOR):ERR) $(PORT)")
}

record(mbbi, "$(DEVICE)$(SENSOR):GtDEGAS")
{
    field(DESC, "HC abd A slot degas")
    field(DTYP, "stream")
    field(INP,  "@mks937.proto get_deg($(SENSOR),$(DEVICE)$(SENSOR):ERR) $(PORT)")
}



