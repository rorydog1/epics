# Template database for the dg535 Stanford Research Systems delay and pulse generator
# Rory Clarke 18/12/2015
#
# Notation: St are setters, Gt are getters
#
#
# substitutions snd record names:
#  - DEVICE name
# PORT    - asyn PORT


####Get errors and machine state

#  GtDeviceName => General info
#  StCL	=> Clear machine
#  GtES => Error state

#     Bit:
#     7  Always zero
#     6  Recalled data was corrupt
#     5  Delay range error
#     4  Delay linkage error
#     3  Wrong mode for the command
#     2  Value is outside allowed range
#     1  Wrong number of parameters
#     0  Unrecognized command

#  GtIS => Machine state

#     Bit:

#    7 Memory contents corrupted
#    6 Service request
#    5 Always zero
#    4 Trigger rate too high
#    3 80MHz PLL is unlocked
#    2 Trigger has occurred
#    1 Busy with timing cycle
#    0 Command error detected

#### Set C1 and C2

# Lookup code and update numerical record when code loaded:
# Enter channel name string into StC1 or StC2
# Or change VAL number directly

####Set and get delay

#Set delay
#  Do above to set C1 and C2 => C1=C2+delay
#  StDlyC1C2 123.123456789012


#Get delay for C1
#  Do above to set C1
#  GtDly
#  StDlyC1C2 holds delay and C2 has been set from dg535

####Set and get termiantion resistance

##Set term res
#  Do above to set C1
#  0=50 Ohm load, 1= high-Z load
#  StTZ {0,1}


##Get term res
#  Do above to set C1
#  GtTZ
#  Now GtDly holds termination resistance value

################################################################################
#General Info

record(stringin, "$(DEVICE):GtDeviceName")
{
    field(VAL,"$(DEVICE)")
}




################################################################################
#Clear device and generate a test error


record(stringin, "$(DEVICE):StCL")
{
    field(DESC,"Clear device")
    field(DTYP, "stream")
    field(INP,"@dg535.proto get_CL() $(PORT)")
}

record(stringin, "$(DEVICE):StTEST")
{
    field(DESC,"Generate a test error")
    field(DTYP, "stream")
    field(INP,"@dg535.proto get_TEST() $(PORT)")
}

################################################################################
#Read errors and machine state


record(ai, "$(DEVICE):GtES")
{
    field(DESC,"Get errors")
    field(DTYP, "stream")
    field(INP,"@dg535.proto get_ES() $(PORT)")
}



record(ai, "$(DEVICE):GtIS")
{
    field(DESC,"Get machine state")
    field(DTYP, "stream")
    field(INP,"@dg535.proto get_IS() $(PORT)")
}


################################################################################
#Two channels can be set relative to each other:
#Channel 1 (Main) and 2 (Relative)

record(mbbi, "$(DEVICE):StC1")
{
    field(DESC, "Channel code C1")
    field(ZRST,"TrigIn")
    field(ONST,"TrigOut")
    field(TWST,"A out")
    field(THST,"B out")
    field(FRST,"AB -AB out")
    field(FVST,"C out")
    field(SXST,"D out")
    field(SVST,"CD -CD out")
}

record(mbbi, "$(DEVICE):StC2")
{
    field(DESC, "Channel code C2")
    field(ZRST,"TrigIn")
    field(ONST,"TrigOut")
    field(TWST,"A out")
    field(THST,"B out")
    field(FRST,"AB -AB out")
    field(FVST,"C out")
    field(SXST,"D out")
    field(SVST,"CD -CD out")
}


################################################################################
#Delay 
#Delay Time of C1 is set to t seconds relative to C2


#Delay set in VAL
#write to device
record(ao, "$(DEVICE):StDlyC1C2")
{
    field(DESC,"Set delay in VAL")
    field(DTYP, "stream")
    field(HIHI, "999.999999999996")
    field(LOLO, "-0.0000000000001")
    field(OUT,"@dg535.proto set_TD($(DEVICE):StC1,$(DEVICE):StC2) $(PORT)")
}

#Read C1 delay from device
#update C2 with reletive channel to selected C1
#updage VAL of StDlyC1C2
record(ai,"$(DEVICE):GtDly")
{
    field(DESC,"Get delay C1 C2")
    field(DTYP,"stream")
    field(INP,"@dg535.proto get_TD($(DEVICE):StC1,$(DEVICE):StC2,$(DEVICE):StDlyC1C2) $(PORT)")
}

################################################################################
##Set termination resistance

#Set term resistance
record(bo, "$(DEVICE):StTZ")
{
    field(DESC,"Set term res VAL")
    field(DTYP, "stream")
    field(ZNAME, "50ohm")
    field(ONAM, "HiZ")
    field(OUT,"@dg535.proto set_TZ($(DEVICE):StC1) $(PORT)")
}

#Get term resisance
record(bi,"$(DEVICE):GtTZ")
{
    field(DESC,"Get termination resistance")
    field(INP,"@dg535.proto get_TZ($(DEVICE):StC1,$(DEVICE):StTZ) $(PORT)")
}

#Set output mode
record(mbbo, "$(DEVICE):StOM")
{
    field(DESC, "Set C1 out mode VAL")
    field(DTYP, "stream")
    field(ZRST,"TTL")
    field(ONST,"NIM")
    field(TWST,"ECL")
    field(THST,"VAR")
    field(OUT,"@dg535.proto set_OM($(DEVICE):StC1) $(PORT)")
}

#Set output polarity (NIM TTL ECL)
record(bo, "$(DEVICE):StPOL")
{
    field(DESC,"Set POL N,T,E")
    field(DTYP, "stream")
    field(ZNAME, "inverted")
    field(ONAM, "normal")
    field(OUT,"@dg535.proto set_TZ($(DEVICE):StC1) $(PORT)")
}

#Set Amp (VAR)
record(ao, "$(DEVICE):StAMP")
{
    field(DESC,"Set Amp VAL")
    field(DTYP, "stream")
    field(ZNAME, "inverted")
    field(ONAM, "normal")
    field(OUT,"@dg535.proto set_TZ($(DEVICE):StC1) $(PORT)")
}

#Set Offset (VAR)
record(ao, "$(DEVICE):StOFF")
{
    field(DESC,"Set offset VAL")
    field(DTYP, "stream")
    field(ZNAME, "inverted")
    field(ONAM, "normal")
    field(OUT,"@dg535.proto set_TZ($(DEVICE):StC1) $(PORT)")
}

###Get Output mode; Offsets and Amp for VAR, polarity for other modes
#Get params
record(bi,"$(DEVICE):GtTZ")
{
    field(DESC,"Get termination resistance")
    field(INP,"@dg535.proto get_TZ($(DEVICE):StC1,$(DEVICE):StOM,$(DEVICE):StAMP,$(DEVICE):StOFF,$(DEVICE):StPOL) $(PORT)")
}


################################################################################
#Set triggers




